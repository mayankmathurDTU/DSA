https://leetcode.com/problems/maximum-width-of-binary-tree/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root == NULL)return 0;
        queue<pair<TreeNode*,unsigned long long>> q;      
        q.push({root,0});
        int ans = 0;
        while(!q.empty()){
            int n =  q.size();
            int temp = n;
            int first,last;
            while(n!=0){
                auto top = q.front();
                q.pop();
                if(n==temp){
                    first = top.second;
                }
                if(n==1){
                    last = top.second;
                }
                if(top.first->left)q.push({top.first->left,top.second*2+1});
                if(top.first->right)q.push({top.first->right,top.second*2+2});
                n--;
            }
            //cout<<first<<" "<<last<<endl;
            ans = max(ans, last - first+1);
        }
        return ans;
    }
};














