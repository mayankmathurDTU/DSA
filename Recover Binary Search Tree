https://leetcode.com/problems/recover-binary-search-tree/description/

https://leetcode.com/problems/recover-binary-search-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* first = NULL;
    TreeNode* mid = NULL;
    TreeNode* second = NULL;
    TreeNode* prev=NULL;
    void inOrder(TreeNode* root){
        if(root==NULL)return;
        inOrder(root->left);
        if(prev!=NULL){
            if(root->val < prev->val){
                if(first==NULL){  
                    first = prev; 
                    mid= root;
                }
                else{
                    second = root;
                }
            }
        }
        prev=root;
        inOrder(root->right);
    }
    void recoverTree(TreeNode* root) {
        inOrder(root);
        if(second == NULL){
            int temp = first->val;
            first->val=mid->val;
            mid->val=temp;
        }
        else{
            int temp = first->val;
            first->val=second->val;
            second->val=temp;
        }
    }
};
